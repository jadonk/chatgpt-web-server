crystal_doc_search_index_callback({"repository_name":"chatgpt-web-server","body":"# ChatGPT generated web server\n\nSeveral of the statements below are false, but the web server does serve up a pretty slick little UI.\n\n<video src=\"https://jadonk.github.io/chatgpt-web-server/assets/demo.mp4\" controls muted playsinline width=\"800\"></video>\n\n![Live demo](https://jadonk.github.io/chatgpt-web-server/assets/demo.gif)\n\n# Semantic UI (Crystal + SQLite + Kemal)\n\nBuild web UIs by defining **semantics**, not HTML.\nYou declare **entities** (domain objects) and **widgets** (UI blocks) in SQLite; the server renders HTML at request time and owns all interactivity.\n\n- **No HTML stored in DB** — only semantic data (types, labels, ops)\n- **Server-side logic** — UI actions are HTTP endpoints you implement\n- **Zero custom client JS** — uses a tiny `htmx` script for requests\n- **Library-first** — `SemanticUI::Engine` + `SemanticUI::Render`\n\n---\n\n## Requirements\n- Crystal ≥ 1.14\n- SQLite3 runtime (`libsqlite3`)\n\n## Project layout\n```\n.\n├── shards.yml                 # deps: kemal, sqlite3\n├── src/\n│   ├── semantic_ui.cr         # module: Engine + Render + data structs\n│   └── chatgpt-web-server.cr  # thin Kemal runner\n└── spec/\n    └── semantic_ui_spec.cr    # tests\n```\n\n---\n\n## Quick start\n```bash\nrm -f ui.db && shards run\n# open http://localhost:3000\n```\nFirst run creates `ui.db` and seeds a demo page (`/page/home`).\n\n### Run the tests\n```bash\ncrystal spec\n```\n\n### Configuration\n- `DB_URL` — database URL (default: `sqlite3:./ui.db`)\n- `PORT`   — HTTP port (default: `3000`)\n\n---\n\n## Concepts\n\n### Entities (the domain)\nStored in table `entities` with a stable `key`, a `kind`, and a typed `schema` (JSON).\n\nExamples:\n```json\n{\"type\":\"number\",\"unit\":\"°C\",\"format\":\"1dp\"}\n{\"type\":\"boolean\"}\n{\"type\":\"string\",\"max\":200}\n```\nOptional: `read_action`, `write_action` (symbolic names your server handles).\n\n### Layouts (pages)\nStored in `layouts` with `slug`, `title`, and `hints` (e.g., `{ \"sidebar_width\": \"300px\", \"max_width\": \"1100px\" }`).\n\n### Widgets (views)\nStored in `widgets`. Each row declares **what** to show and **where**:\n- `region`: `chrome | header | main | sidebar | footer`\n- `widget_kind`: `heading | value | toggle | button | form | divider`\n- `entity_key`: optional reference to an entity\n- `label`: human text\n- `hints`: semantic/presentation hints (JSON), e.g.:\n  - `{\"level\": 2}` for headings\n  - `{\"style\": \"stat\"}` for compact stat blocks\n  - `{\"op\": \"read\" | \"toggle\" | \"write\", \"value\": true}` for buttons\n  - `{\"fields\": [{\"name\":\"text\",\"placeholder\":\"Type a note…\"}]}` for forms\n\n> All HTML is produced by server templates. The DB never contains raw HTML.\n\n---\n\n## HTTP endpoints\n- **Render page**: `GET /page/:slug` → full HTML\n- **Read (typed)**: `GET /read/:key` → text, e.g., `23.4 °C`, `on`, `off`\n- **Write (typed)**: `POST /write/:key`\n  - body fields: `value=true|false|1|0`, `toggle=true`, or domain-specific (e.g., `text`)\n\nThe UI triggers these via `hx-*` attributes—no custom JS is authored.\n\n---\n\n## Using the module\n```crystal\nrequire \"./src/semantic_ui\"\n\nengine = SemanticUI::Engine.new(ENV[\"DB_URL\"]? || \"sqlite3:./ui.db\")\nengine.seed_if_empty\n\nhtml = SemanticUI::Render.render_page(engine, \"home\")\nputs html\n```\n\n### Kemal integration (simplified from `app.cr`)\n```crystal\nrequire \"kemal\"\nrequire \"./src/semantic_ui\"\n\nengine = SemanticUI::Engine.new\nengine.seed_if_empty\n\nget \"/page/:slug\" { |env| env.response.print SemanticUI::Render.render_page(engine, env.params.url[\"slug\"]) }\nget \"/read/:key\"  { |env| env.response.print engine.read_text(env.params.url[\"key\"]) }\npost \"/write/:key\" do |env|\n  params = Hash(String, String).new\n  env.params.body.each { |k, v| params[k] = v }\n  env.response.print engine.write_apply(env.params.url[\"key\"], params)\nend\nKemal.run\n```\n\n---\n\n## Seeded demo\n- **Entities:** `temp_sensor` (number °C), `led` (boolean), `note` (string)\n- **Page:** `/page/home`\n- **Widgets:** toolbar buttons (refresh temp, toggle LED), stat blocks, simple form\n\nClick “Read temperature” to update the Temperature stat. Use LED buttons to set/toggle state. The Note form posts text to the server.\n\n---\n\n## Customize\n\n### Add an entity\n```sql\nINSERT INTO entities (key, kind, schema, read_action, write_action)\nVALUES (\n  'fan', 'actuator',\n  '{\"type\":\"boolean\"}',\n  'fan_state', 'set_fan'\n);\n```\nThen implement `fan_state`/`set_fan` in `Engine#read_text` / `Engine#write_apply`.\n\n### Add a widget\n```sql\nINSERT INTO widgets (layout_id, region, ord, widget_kind, entity_key, label, hints)\nVALUES (\n  1, 'main', 10, 'button', 'fan', 'Fan ON',\n  '{\"op\":\"write\",\"value\":true}'\n);\n```\n\n### Auto-refresh a value (optional)\nAdd `{\"trigger\":\"load, every 10s\"}` to a value widget’s `hints` and include an autoload div in the value renderer (see comments in code).\n\n---\n\n## Troubleshooting\n- **`no such table: layouts`** — Remove `ui.db` (from older versions) and rerun; tables are created on start.\n- **JSON parse errors in `hints`** — Ensure valid JSON (double quotes, no symbols/single quotes).\n- **Nothing updates** — Use DevTools → Network; confirm `/read/:key` or `/write/:key` returns `200`.\n\n---\n\n## Production\n```bash\nshards build --release\n./chatgpt-web-server\n```\nRun behind a reverse proxy (nginx/Caddy). Add auth/CSRF if exposing publicly (this demo has none).\n\n---\n\n## License\nMIT — see `LICENSE`.\n\n## Acknowledgements\n- [Crystal](https://crystal-lang.org/), [Kemal](https://kemalcr.com/), [SQLite](https://sqlite.org/), and the tiny-but-mighty [htmx](https://htmx.org/).\n\n","program":{"html_id":"chatgpt-web-server/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"chatgpt-web-server","program":true,"enum":false,"alias":false,"const":false,"constants":[{"id":"DB_URL","name":"DB_URL","value":"ENV[\"DB_URL\"]? || \"sqlite3:./ui.db\""},{"id":"PORT","name":"PORT","value":"(ENV[\"PORT\"]? || \"3000\").to_i"}],"types":[{"html_id":"chatgpt-web-server/SemanticUI","path":"SemanticUI.html","kind":"module","full_name":"SemanticUI","name":"SemanticUI","abstract":false,"locations":[{"filename":"src/semantic_ui.cr","line_number":7,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L7"}],"repository_name":"chatgpt-web-server","program":false,"enum":false,"alias":false,"const":false,"types":[{"html_id":"chatgpt-web-server/SemanticUI/Engine","path":"SemanticUI/Engine.html","kind":"class","full_name":"SemanticUI::Engine","name":"Engine","abstract":false,"superclass":{"html_id":"chatgpt-web-server/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chatgpt-web-server/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chatgpt-web-server/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/semantic_ui.cr","line_number":24,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L24"}],"repository_name":"chatgpt-web-server","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"SCHEMA_SQL","name":"SCHEMA_SQL","value":"\"CREATE TABLE IF NOT EXISTS entities (\\n  id INTEGER PRIMARY KEY,\\n  key TEXT UNIQUE NOT NULL,\\n  kind TEXT NOT NULL,\\n  schema TEXT NOT NULL DEFAULT '{}',\\n  read_action  TEXT,\\n  write_action TEXT\\n);\\n\\nCREATE TABLE IF NOT EXISTS layouts (\\n  id INTEGER PRIMARY KEY,\\n  slug TEXT UNIQUE NOT NULL,\\n  title TEXT NOT NULL,\\n  hints TEXT NOT NULL DEFAULT '{}'\\n);\\n\\nCREATE TABLE IF NOT EXISTS widgets (\\n  id INTEGER PRIMARY KEY,\\n  layout_id INTEGER NOT NULL,\\n  region TEXT NOT NULL,\\n  ord INTEGER NOT NULL DEFAULT 0,\\n  widget_kind TEXT NOT NULL,\\n  entity_key TEXT,\\n  label TEXT,\\n  hints TEXT NOT NULL DEFAULT '{}',\\n  FOREIGN KEY(layout_id) REFERENCES layouts(id)\\n);\""}],"namespace":{"html_id":"chatgpt-web-server/SemanticUI","kind":"module","full_name":"SemanticUI","name":"SemanticUI"},"doc":"------------------------------- Engine -------------------------------------","summary":"<p>------------------------------- Engine -------------------------------------</p>","constructors":[{"html_id":"new(db_url:String=\"sqlite3:./ui.db\")-class-method","name":"new","abstract":false,"args":[{"name":"db_url","default_value":"\"sqlite3:./ui.db\"","external_name":"db_url","restriction":"String"}],"args_string":"(db_url : String = \"sqlite3:./ui.db\")","args_html":"(db_url : String = <span class=\"s\">&quot;sqlite3:./ui.db&quot;</span>)","location":{"filename":"src/semantic_ui.cr","line_number":57,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L57"},"def":{"name":"new","args":[{"name":"db_url","default_value":"\"sqlite3:./ui.db\"","external_name":"db_url","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(db_url)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"create_schema-instance-method","name":"create_schema","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":63,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L63"},"def":{"name":"create_schema","visibility":"Public","body":"(SCHEMA_SQL.split(';')).each do |stmt|\n  sql = stmt.strip\n  if sql.empty?\n    next\n  end\n  @db.exec(sql)\nend"},"external_var":false},{"html_id":"fetch_layout(slug:String):Tuple(Int64,String,String)|Nil-instance-method","name":"fetch_layout","abstract":false,"args":[{"name":"slug","external_name":"slug","restriction":"String"}],"args_string":"(slug : String) : Tuple(Int64, String, String) | Nil","args_html":"(slug : String) : Tuple(Int64, String, String) | Nil","location":{"filename":"src/semantic_ui.cr","line_number":136,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L136"},"def":{"name":"fetch_layout","args":[{"name":"slug","external_name":"slug","restriction":"String"}],"return_type":"::Tuple(Int64, String, String) | ::Nil","visibility":"Public","body":"@db.query_one?(\"SELECT id, title, hints FROM layouts WHERE slug = ?\", slug, as: {Int64, String, String})"},"external_var":false},{"html_id":"fetch_widgets(layout_id:Int64):Array(WidgetRow)-instance-method","name":"fetch_widgets","abstract":false,"args":[{"name":"layout_id","external_name":"layout_id","restriction":"Int64"}],"args_string":"(layout_id : Int64) : Array(WidgetRow)","args_html":"(layout_id : Int64) : Array(<a href=\"../SemanticUI/WidgetRow.html\">WidgetRow</a>)","location":{"filename":"src/semantic_ui.cr","line_number":140,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L140"},"def":{"name":"fetch_widgets","args":[{"name":"layout_id","external_name":"layout_id","restriction":"Int64"}],"return_type":"Array(WidgetRow)","visibility":"Public","body":"rows = [] of WidgetRow\n@db.query(\"SELECT region, ord, widget_kind, entity_key, label, hints FROM widgets WHERE layout_id = ? ORDER BY region, ord, id\", layout_id) do |rs|\n  rs.each do\n    region = rs.read(String)\n    ord = (rs.read(Int64)).to_i\n    kind = rs.read(String)\n    entkey = rs.read(::Union(String, ::Nil))\n    label = rs.read(::Union(String, ::Nil))\n    hintsj = rs.read(String)\n    rows << (WidgetRow.new(region, ord, kind, entkey, label, hintsj))\n  end\nend\nrows\n"},"external_var":false},{"html_id":"get_entity(key:String):Entity|Nil-instance-method","name":"get_entity","doc":"--------------------------- Query helpers --------------------------------","summary":"<p>--------------------------- Query helpers --------------------------------</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String) : Entity | Nil","args_html":"(key : String) : <a href=\"../SemanticUI/Entity.html\">Entity</a> | Nil","location":{"filename":"src/semantic_ui.cr","line_number":129,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L129"},"def":{"name":"get_entity","args":[{"name":"key","external_name":"key","restriction":"String"}],"return_type":"Entity | ::Nil","visibility":"Public","body":"if tup = @db.query_one?(\"SELECT key, kind, schema, read_action, write_action FROM entities WHERE key = ?\", key, as: {String, String, String, ::Union(String, ::Nil), ::Union(String, ::Nil)})\n  return Entity.new(*tup)\nend\nnil\n"},"external_var":false},{"html_id":"read_text(key:String):String-instance-method","name":"read_text","doc":"----------------------------- Semantics ----------------------------------","summary":"<p>----------------------------- Semantics ----------------------------------</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String) : String","args_html":"(key : String) : String","location":{"filename":"src/semantic_ui.cr","line_number":157,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L157"},"def":{"name":"read_text","args":[{"name":"key","external_name":"key","restriction":"String"}],"return_type":"String","visibility":"Public","body":"ent = (get_entity(key)) || (raise(\"No such entity: #{key}\"))\ncase ent.read_action\nwhen \"temp\"\n  t = (20.0 + (rand * 5)).round(1)\n  unit = (JSON.parse(ent.schema_json))[\"unit\"]?.try(&.as_s?) || \"\"\n  \"#{t} #{unit}\".strip\nwhen \"led_state\"\n  @led_on.get ? \"on\" : \"off\"\nwhen nil\n  raise(\"Entity not readable\")\nelse\n  raise(\"Unknown read action\")\nend\n"},"external_var":false},{"html_id":"seed_if_empty-instance-method","name":"seed_if_empty","doc":"----------- Seeding (idempotent) ----------------------------------------","summary":"<p>----------- Seeding (idempotent) ----------------------------------------</p>","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":72,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L72"},"def":{"name":"seed_if_empty","visibility":"Public","body":"layouts_count = @db.query_one(\"SELECT COUNT(*) FROM layouts\", as: Int64)\nif layouts_count > 0\n  return\nend\n\n\nadd_entities(\"temp_sensor\", \"measurement\", {\"type\" => \"number\", \"unit\" => \"°C\", \"format\" => \"1dp\"}.to_json, \"temp\", nil)\nadd_entities(\"led\", \"actuator\", {\"type\" => \"boolean\"}.to_json, \"led_state\", \"set_led\")\nadd_entities(\"note\", \"note\", {\"type\" => \"string\", \"max\" => 200}.to_json, nil, \"note\")\n\n\nadd_layout(\"home\", \"Beagle Device Panel\", {\"sidebar_width\" => \"300px\", \"max_width\" => \"1100px\"}.to_json)\nlayout_id = @db.query_one(\"SELECT last_insert_rowid()\", as: Int64)\n\n\nadd_widget(layout_id, \"chrome\", 0, \"button\", \"temp_sensor\", \"↻ Refresh temp\", {\"op\" => \"read\"}.to_json)\nadd_widget(layout_id, \"chrome\", 1, \"button\", \"led\", \"Toggle LED\", {\"op\" => \"toggle\"}.to_json)\n\nadd_widget(layout_id, \"header\", 0, \"heading\", nil, \"Beagle Device Panel\", {\"level\" => 1}.to_json)\nadd_widget(layout_id, \"header\", 1, \"heading\", nil, \"Server‑driven from semantics (no HTML in DB)\", {\"level\" => 3}.to_json)\n\nadd_widget(layout_id, \"sidebar\", 0, \"value\", \"temp_sensor\", \"Temperature\", {\"style\" => \"stat\"}.to_json)\nadd_widget(layout_id, \"sidebar\", 1, \"value\", \"led\", \"LED\", {\"style\" => \"stat\"}.to_json)\nadd_widget(layout_id, \"sidebar\", 2, \"divider\", nil, nil, \"{}\")\nadd_widget(layout_id, \"sidebar\", 3, \"form\", \"note\", \"Send Note\", {\"fields\" => [{\"name\" => \"text\", \"placeholder\" => \"Type a note…\"}]}.to_json)\n\nadd_widget(layout_id, \"main\", 0, \"heading\", nil, \"Live Controls\", {\"level\" => 2}.to_json)\nadd_widget(layout_id, \"main\", 1, \"button\", \"temp_sensor\", \"Read temperature\", {\"op\" => \"read\"}.to_json)\nadd_widget(layout_id, \"main\", 2, \"button\", \"led\", \"LED ON\", {\"op\" => \"write\", \"value\" => true}.to_json)\nadd_widget(layout_id, \"main\", 3, \"button\", \"led\", \"LED OFF\", {\"op\" => \"write\", \"value\" => false}.to_json)\n"},"external_var":false},{"html_id":"write_apply(key:String,params:Hash(String,String)):String-instance-method","name":"write_apply","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"params","external_name":"params","restriction":"Hash(String, String)"}],"args_string":"(key : String, params : Hash(String, String)) : String","args_html":"(key : String, params : Hash(String, String)) : String","location":{"filename":"src/semantic_ui.cr","line_number":173,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L173"},"def":{"name":"write_apply","args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"params","external_name":"params","restriction":"Hash(String, String)"}],"return_type":"String","visibility":"Public","body":"ent = (get_entity(key)) || (raise(\"No such entity: #{key}\"))\ncase ent.write_action\nwhen \"set_led\"\n  if params[\"toggle\"]? == \"true\"\n    @led_on.set(!@led_on.get)\n  elsif v = params[\"value\"]?\n    @led_on.set((v == \"true\") || (v == \"1\"))\n  end\n  @led_on.get ? \"on\" : \"off\"\nwhen \"note\"\n  text = params[\"text\"]?.to_s.strip\n  puts(\"NOTE: #{text}\")\n  \"ok\"\nwhen nil\n  raise(\"Entity not writable\")\nelse\n  raise(\"Unknown write action\")\nend\n"},"external_var":false}]},{"html_id":"chatgpt-web-server/SemanticUI/Entity","path":"SemanticUI/Entity.html","kind":"struct","full_name":"SemanticUI::Entity","name":"Entity","abstract":false,"superclass":{"html_id":"chatgpt-web-server/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chatgpt-web-server/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chatgpt-web-server/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chatgpt-web-server/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/semantic_ui.cr","line_number":9,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L9"}],"repository_name":"chatgpt-web-server","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chatgpt-web-server/SemanticUI","kind":"module","full_name":"SemanticUI","name":"SemanticUI"},"doc":"------------------------------ Data models ---------------------------------","summary":"<p>------------------------------ Data models ---------------------------------</p>","constructors":[{"html_id":"new(key:String,kind:String,schema_json:String,read_action:String|Nil,write_action:String|Nil)-class-method","name":"new","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"kind","external_name":"kind","restriction":"String"},{"name":"schema_json","external_name":"schema_json","restriction":"String"},{"name":"read_action","external_name":"read_action","restriction":"String | ::Nil"},{"name":"write_action","external_name":"write_action","restriction":"String | ::Nil"}],"args_string":"(key : String, kind : String, schema_json : String, read_action : String | Nil, write_action : String | Nil)","args_html":"(key : String, kind : String, schema_json : String, read_action : String | Nil, write_action : String | Nil)","location":{"filename":"src/semantic_ui.cr","line_number":12,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L12"},"def":{"name":"new","args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"kind","external_name":"kind","restriction":"String"},{"name":"schema_json","external_name":"schema_json","restriction":"String"},{"name":"read_action","external_name":"read_action","restriction":"String | ::Nil"},{"name":"write_action","external_name":"write_action","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(key, kind, schema_json, read_action, write_action)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"key:String-instance-method","name":"key","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":10,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L10"},"def":{"name":"key","visibility":"Public","body":"@key"},"external_var":false},{"html_id":"kind:String-instance-method","name":"kind","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":10,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L10"},"def":{"name":"kind","visibility":"Public","body":"@kind"},"external_var":false},{"html_id":"read_action:String?-instance-method","name":"read_action","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":10,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L10"},"def":{"name":"read_action","visibility":"Public","body":"@read_action"},"external_var":false},{"html_id":"schema_json:String-instance-method","name":"schema_json","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":10,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L10"},"def":{"name":"schema_json","visibility":"Public","body":"@schema_json"},"external_var":false},{"html_id":"write_action:String?-instance-method","name":"write_action","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":10,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L10"},"def":{"name":"write_action","visibility":"Public","body":"@write_action"},"external_var":false}]},{"html_id":"chatgpt-web-server/SemanticUI/Render","path":"SemanticUI/Render.html","kind":"module","full_name":"SemanticUI::Render","name":"Render","abstract":false,"locations":[{"filename":"src/semantic_ui.cr","line_number":199,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L199"}],"repository_name":"chatgpt-web-server","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BASE_TEMPLATE","name":"BASE_TEMPLATE","value":"\"<!doctype html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n    <title>%TITLE%</title>\\n    #{HTMX}\\n    <style>%CSS%</style>\\n  </head>\\n  <body>\\n    <div class=\\\"header\\\">\\n      <div class=\\\"max\\\">\\n        <div class=\\\"toolbar\\\">\\n          %CHROME%\\n          <span class=\\\"spacer\\\"></span>\\n          <span class=\\\"small\\\">Server‑driven (semantic)</span>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"main\\\">\\n      <div class=\\\"max grid\\\">\\n        <div class=\\\"content\\\">\\n          <div class=\\\"card\\\">%HEADER%</div>\\n          <div class=\\\"card\\\">%MAIN%</div>\\n        </div>\\n        <aside>\\n          <div class=\\\"card\\\">%SIDEBAR%</div>\\n        </aside>\\n      </div>\\n    </div>\\n\\n    <footer class=\\\"max\\\">\\n      <div class=\\\"small muted\\\">%FOOTER%</div>\\n    </footer>\\n  </body>\\n</html>\""},{"id":"CSS_TEMPLATE","name":"CSS_TEMPLATE","value":"\":root{ --gap:14px; --radius:14px; --border:#e5e7eb; --bg:#ffffff; --muted:#6b7280 }\\n*{ box-sizing:border-box }\\nbody{ margin:0; font-family:system-ui,-apple-system,Segoe UI,Roboto,sans-serif; background:#f6f7f9 }\\n.header{ position:sticky; top:0; z-index:50; border-bottom:1px solid var(--border); background:var(--bg) }\\n.max{ max-width:%MAX_WIDTH%; margin:0 auto; padding:12px 16px }\\n.toolbar{ display:flex; gap:var(--gap); align-items:center }\\n.toolbar .spacer{ flex:1 }\\n.grid{ display:grid; grid-template-columns:1fr %SIDEBAR_WIDTH%; gap:var(--gap); align-items:start }\\n.main{ padding:20px 16px }\\n.card{ background:var(--bg); border:1px solid var(--border); border-radius:var(--radius); padding:14px 16px }\\n.h1{ font-size:28px; font-weight:700; margin:0 0 6px }\\n.h2{ font-size:20px; font-weight:600; margin:0 0 6px }\\n.h3{ font-size:16px; font-weight:600; margin:0 0 6px; color:#374151 }\\n.p{ margin:6px 0; color:#111827 }\\n.muted{ color:var(--muted) }\\n.btn{ display:inline-flex; align-items:center; gap:8px; padding:10px 14px; border-radius:12px; border:1px solid var(--border); background:#fff; cursor:pointer }\\n.btn:hover{ background:#fafafa }\\n.row{ display:flex; gap:10px; flex-wrap:wrap; align-items:center }\\n.stat{ display:flex; justify-content:space-between; align-items:center; padding:10px 12px; border:1px solid var(--border); border-radius:12px }\\n.stat .label{ color:var(--muted) }\\n.input{ padding:10px 12px; border:1px solid var(--border); border-radius:12px; min-width:0 }\\n.divider{ height:1px; background:var(--border); margin:10px 0 }\\n.small{ font-size:12px; color:var(--muted) }\""},{"id":"HTMX","name":"HTMX","value":"\"<script src=\\\"https://unpkg.com/htmx.org@1.9.12\\\"></script>\""}],"extended_modules":[{"html_id":"chatgpt-web-server/SemanticUI/Render","kind":"module","full_name":"SemanticUI::Render","name":"Render"}],"namespace":{"html_id":"chatgpt-web-server/SemanticUI","kind":"module","full_name":"SemanticUI","name":"SemanticUI"},"doc":"------------------------------- Render -------------------------------------","summary":"<p>------------------------------- Render -------------------------------------</p>","instance_methods":[{"html_id":"render_page(engine:Engine,slug:String):String-instance-method","name":"render_page","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"slug","external_name":"slug","restriction":"String"}],"args_string":"(engine : Engine, slug : String) : String","args_html":"(engine : <a href=\"../SemanticUI/Engine.html\">Engine</a>, slug : String) : String","location":{"filename":"src/semantic_ui.cr","line_number":370,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L370"},"def":{"name":"render_page","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"slug","external_name":"slug","restriction":"String"}],"return_type":"String","visibility":"Public","body":"page = (engine.fetch_layout(slug)) || (raise(\"No such page: #{slug}\"))\nlayout_id, title, hints_json = page\nhints = JSON.parse(hints_json)\ncss = (CSS_TEMPLATE\n  .gsub(\"%MAX_WIDTH%\", hints[\"max_width\"]?.try(&.as_s?) || \"1200px\"))\n  .gsub(\"%SIDEBAR_WIDTH%\", hints[\"sidebar_width\"]?.try(&.as_s?) || \"320px\")\n\nrows = engine.fetch_widgets(layout_id)\nregions = Hash(String, Array(WidgetRow)).new do |h, k| h[k] = [] of WidgetRow end\nrows.each do |r| regions[r.region] << r end\n\nbuild = ->(ws : Array(WidgetRow)) do\n  String.build do |io|\n    ws.each do |w|\n      (io << (render_widget(engine, w))) << \"\\n\"\n    end\n  end\nend\n\n((((((BASE_TEMPLATE\n  .gsub(\"%TITLE%\", title))\n  .gsub(\"%CSS%\", css))\n  .gsub(\"%CHROME%\", build.call(regions[\"chrome\"])))\n  .gsub(\"%HEADER%\", build.call(regions[\"header\"])))\n  .gsub(\"%MAIN%\", build.call(regions[\"main\"])))\n  .gsub(\"%SIDEBAR%\", build.call(regions[\"sidebar\"])))\n  .gsub(\"%FOOTER%\", build.call(regions[\"footer\"]))\n"},"external_var":false},{"html_id":"render_widget(engine:Engine,w:WidgetRow):String-instance-method","name":"render_widget","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"w","external_name":"w","restriction":"WidgetRow"}],"args_string":"(engine : Engine, w : WidgetRow) : String","args_html":"(engine : <a href=\"../SemanticUI/Engine.html\">Engine</a>, w : <a href=\"../SemanticUI/WidgetRow.html\">WidgetRow</a>) : String","location":{"filename":"src/semantic_ui.cr","line_number":349,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L349"},"def":{"name":"render_widget","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"w","external_name":"w","restriction":"WidgetRow"}],"return_type":"String","visibility":"Public","body":"case w.kind\nwhen \"heading\"\n  hints = JSON.parse(w.hints)\n  lvl = hints[\"level\"]?.try(&.as_i?) || 2\n  cls = case lvl\n  when 1\n    \"h1\"\n  when 2\n    \"h2\"\n  else\n    \"h3\"\n  end\n  label = html_escape(w.label || \"\")\n  \"<div class='#{cls}'>#{label}</div>\"\nwhen \"divider\"\n  \"<div class='divider'></div>\"\nwhen \"value\"\n  render_value_widget(engine, w)\nwhen \"toggle\"\n  render_toggle_widget(w)\nwhen \"button\"\n  render_button_widget(w)\nwhen \"form\"\n  render_form_widget(w)\nelse\n  \"<div class='p muted'>[unknown widget: #{w.kind}]</div>\"\nend"},"external_var":false}]},{"html_id":"chatgpt-web-server/SemanticUI/WidgetRow","path":"SemanticUI/WidgetRow.html","kind":"struct","full_name":"SemanticUI::WidgetRow","name":"WidgetRow","abstract":false,"superclass":{"html_id":"chatgpt-web-server/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chatgpt-web-server/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chatgpt-web-server/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chatgpt-web-server/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/semantic_ui.cr","line_number":16,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L16"}],"repository_name":"chatgpt-web-server","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chatgpt-web-server/SemanticUI","kind":"module","full_name":"SemanticUI","name":"SemanticUI"},"constructors":[{"html_id":"new(region:String,ord:Int32,kind:String,entity_key:String|Nil,label:String|Nil,hints:String)-class-method","name":"new","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"String"},{"name":"ord","external_name":"ord","restriction":"Int32"},{"name":"kind","external_name":"kind","restriction":"String"},{"name":"entity_key","external_name":"entity_key","restriction":"String | ::Nil"},{"name":"label","external_name":"label","restriction":"String | ::Nil"},{"name":"hints","external_name":"hints","restriction":"String"}],"args_string":"(region : String, ord : Int32, kind : String, entity_key : String | Nil, label : String | Nil, hints : String)","args_html":"(region : String, ord : Int32, kind : String, entity_key : String | Nil, label : String | Nil, hints : String)","location":{"filename":"src/semantic_ui.cr","line_number":19,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L19"},"def":{"name":"new","args":[{"name":"region","external_name":"region","restriction":"String"},{"name":"ord","external_name":"ord","restriction":"Int32"},{"name":"kind","external_name":"kind","restriction":"String"},{"name":"entity_key","external_name":"entity_key","restriction":"String | ::Nil"},{"name":"label","external_name":"label","restriction":"String | ::Nil"},{"name":"hints","external_name":"hints","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(region, ord, kind, entity_key, label, hints)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"entity_key:String?-instance-method","name":"entity_key","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":17,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L17"},"def":{"name":"entity_key","visibility":"Public","body":"@entity_key"},"external_var":false},{"html_id":"hints:String-instance-method","name":"hints","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":17,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L17"},"def":{"name":"hints","visibility":"Public","body":"@hints"},"external_var":false},{"html_id":"kind:String-instance-method","name":"kind","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":17,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L17"},"def":{"name":"kind","visibility":"Public","body":"@kind"},"external_var":false},{"html_id":"label:String?-instance-method","name":"label","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":17,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L17"},"def":{"name":"label","visibility":"Public","body":"@label"},"external_var":false},{"html_id":"ord:Int32-instance-method","name":"ord","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":17,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L17"},"def":{"name":"ord","visibility":"Public","body":"@ord"},"external_var":false},{"html_id":"region:String-instance-method","name":"region","abstract":false,"location":{"filename":"src/semantic_ui.cr","line_number":17,"url":"https://github.com/jadonk/chatgpt-web-server/blob/3fe5b2596bbc2c1f2d210e51875a5c29838a5171/src/semantic_ui.cr#L17"},"def":{"name":"region","visibility":"Public","body":"@region"},"external_var":false}]}]}]}})